{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Documents\\\\GitHub\\\\arif-react\\\\src\\\\Components\\\\Playlist\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport \"../../Assets/Playlist.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nPlaylistForm.propTypes = {\n  selectedMusic: PropTypes.any\n};\n\nfunction PlaylistForm(_ref) {\n  _s();\n\n  let {\n    selectedMusic\n  } = _ref;\n  const {\n    token\n  } = useSelector(state => state.userToken);\n  const [playlistInfo, setPlaylistInfo] = useState({\n    \"name\": \"\",\n    \"description\": \"\"\n  });\n\n  const handleFormPlaylist = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setPlaylistInfo({ ...playlistInfo,\n      [name]: value\n    });\n  };\n\n  const fetchProfile = async () => {\n    const url = \"https://api.spotify.com/v1/me\";\n\n    try {\n      const response = await fetch(`${url}`, {\n        headers: {\n          \"Authorization\": \"Bearer \" + token\n        }\n      });\n\n      if (!response.ok) {\n        switch (response.status) {\n          case 401:\n            throw new Error(\"Unauthorized access, please login first\");\n\n          case 403:\n            throw new Error(\"Forbidden access\");\n\n          default:\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n      } else {\n        const userData = await response.json();\n        return userData.id;\n      }\n    } catch (error) {\n      alert(`There has been a problem with your fetch operation: ${error.message}`);\n    }\n  };\n\n  const createPlaylist = async userID => {\n    const url = \"https://api.spotify.com/v1/users/\";\n    const playlistParam = { ...playlistInfo,\n      \"public\": false,\n      \"collaborative\": false\n    };\n\n    try {\n      const response = await fetch(`${url}${userID}/playlists`, {\n        method: \"POST\",\n        headers: {\n          \"Authorization\": \"Bearer \" + token,\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(playlistParam)\n      });\n\n      if (!response.ok) {\n        switch (response.status) {\n          case 401:\n            throw new Error(\"Unauthorized access, please login first\");\n\n          case 403:\n            throw new Error(\"Forbidden access\");\n\n          default:\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n      } else {\n        const playlistData = await response.json();\n        return playlistData.id;\n      }\n    } catch (error) {\n      alert(`There has been a problem with your post data operation: ${error.message}`);\n    }\n  };\n\n  const addItemsToPlaylist = async playlistId => {\n    const url = \"https://api.spotify.com/v1/playlists/\";\n    const tracksParam = {\n      \"uris\": selectedMusic\n    };\n\n    try {\n      const response = await fetch(`${url}${playlistId}/tracks`, {\n        method: \"POST\",\n        headers: {\n          \"Authorization\": \"Bearer \" + token,\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(tracksParam)\n      });\n\n      if (!response.ok) {\n        switch (response.status) {\n          case 401:\n            throw new Error(\"Unauthorized access, please login first\");\n\n          case 403:\n            throw new Error(\"Forbidden access\");\n\n          default:\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n      } else {\n        const addedTracks = await response.json();\n        return addedTracks;\n      }\n    } catch (error) {\n      alert(`There has been a problem with your post data operation: ${error.message}`);\n    }\n  };\n\n  const handleCreatePlaylist = async e => {\n    e.preventDefault();\n    const userId = await fetchProfile(token);\n    const playlistId = await createPlaylist(userId);\n    const snapshotId = await addItemsToPlaylist(playlistId);\n    alert(`Yout playlist has been added\\nSnapshot: ${snapshotId.snapshot_id}`);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"playlist-form\",\n      action: \"\",\n      onSubmit: handleCreatePlaylist,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"input-name\",\n        children: \"Playlist Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"input-name\",\n        className: \"input text\",\n        onChange: handleFormPlaylist,\n        type: \"text\",\n        name: \"name\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"input-desc\",\n        children: \"Playlist Description\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        id: \"input-desc\",\n        className: \"input textarea\",\n        onChange: handleFormPlaylist,\n        type: \"textarea\",\n        name: \"description\",\n        minLength: 10,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"input submit\",\n        type: \"submit\",\n        value: \"Save Playlist\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 4\n    }, this)\n  }, void 0, false);\n}\n\n_s(PlaylistForm, \"nEJ8lWbaBvpFdm5C+5oWvWiyVVE=\", false, function () {\n  return [useSelector];\n});\n\n_c = PlaylistForm;\nexport default PlaylistForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"PlaylistForm\");","map":{"version":3,"sources":["C:/Users/ASUS/Documents/GitHub/arif-react/src/Components/Playlist/index.js"],"names":["React","useState","useSelector","PropTypes","PlaylistForm","propTypes","selectedMusic","any","token","state","userToken","playlistInfo","setPlaylistInfo","handleFormPlaylist","e","name","value","target","fetchProfile","url","response","fetch","headers","ok","status","Error","userData","json","id","error","alert","message","createPlaylist","userID","playlistParam","method","body","JSON","stringify","playlistData","addItemsToPlaylist","playlistId","tracksParam","addedTracks","handleCreatePlaylist","preventDefault","userId","snapshotId","snapshot_id"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"../../Assets/Playlist.css\";\r\n\r\nPlaylistForm.propTypes = {\r\n\tselectedMusic: PropTypes.any,\r\n};\r\n\r\nfunction PlaylistForm ({selectedMusic}) {\r\n\tconst { token } = useSelector((state) => state.userToken);\r\n\tconst [playlistInfo, setPlaylistInfo] = useState({\r\n\t\t\"name\": \"\",\r\n\t\t\"description\": \"\"\r\n\t});\r\n    \r\n\tconst handleFormPlaylist = (e) => {\r\n\t\tconst { name, value } = e.target;\r\n\t\tsetPlaylistInfo({...playlistInfo, [name]: value });\r\n\t};\r\n    \r\n\tconst fetchProfile = async () => {\r\n\t\tconst url = \"https://api.spotify.com/v1/me\";\r\n\t\ttry {\r\n\t\t\tconst response = await fetch(`${url}`, {\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t\"Authorization\" : \"Bearer \" + token\r\n\t\t\t\t}\r\n\t\t\t});\r\n    \r\n\t\t\tif (!response.ok) {\r\n\t\t\t\tswitch (response.status) {\r\n\t\t\t\tcase 401:\r\n\t\t\t\t\tthrow new Error(\"Unauthorized access, please login first\");\r\n\t\t\t\tcase 403:\r\n\t\t\t\t\tthrow new Error(\"Forbidden access\");\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow new Error(`HTTP error! status: ${response.status}`);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tconst userData = await response.json();\r\n\t\t\t\treturn userData.id;\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\talert(`There has been a problem with your fetch operation: ${error.message}`);\r\n\t\t}\r\n\t};\r\n    \r\n\tconst createPlaylist = async (userID) => {\r\n\t\tconst url = \"https://api.spotify.com/v1/users/\";\r\n\t\tconst playlistParam = {\r\n\t\t\t...playlistInfo,\r\n\t\t\t\"public\": false,\r\n\t\t\t\"collaborative\": false\r\n\t\t};\r\n\t\ttry {\r\n\t\t\tconst response = await fetch(`${url}${userID}/playlists`, {\r\n\t\t\t\tmethod: \"POST\",\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t\"Authorization\" : \"Bearer \" + token,\r\n\t\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t\t},\r\n\t\t\t\tbody: JSON.stringify(playlistParam)\r\n\t\t\t});\r\n    \r\n\t\t\tif (!response.ok) {\r\n\t\t\t\tswitch (response.status) {\r\n\t\t\t\tcase 401:\r\n\t\t\t\t\tthrow new Error(\"Unauthorized access, please login first\");\r\n\t\t\t\tcase 403:\r\n\t\t\t\t\tthrow new Error(\"Forbidden access\");\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow new Error(`HTTP error! status: ${response.status}`);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tconst playlistData = await response.json();\r\n\t\t\t\treturn playlistData.id;\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\talert(`There has been a problem with your post data operation: ${error.message}`);\r\n\t\t}\r\n\t};\r\n    \r\n\tconst addItemsToPlaylist = async (playlistId) => {\r\n\t\tconst url = \"https://api.spotify.com/v1/playlists/\";\r\n\t\tconst tracksParam = {\"uris\": selectedMusic};\r\n\t\ttry {\r\n\t\t\tconst response = await fetch(`${url}${playlistId}/tracks`, {\r\n\t\t\t\tmethod: \"POST\",\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t\"Authorization\" : \"Bearer \" + token,\r\n\t\t\t\t\t\"Content-Type\": \"application/json\"\r\n\t\t\t\t},\r\n\t\t\t\tbody: JSON.stringify(tracksParam)\r\n\t\t\t});\r\n    \r\n\t\t\tif (!response.ok) {\r\n\t\t\t\tswitch (response.status) {\r\n\t\t\t\tcase 401:\r\n\t\t\t\t\tthrow new Error(\"Unauthorized access, please login first\");\r\n\t\t\t\tcase 403:\r\n\t\t\t\t\tthrow new Error(\"Forbidden access\");\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow new Error(`HTTP error! status: ${response.status}`);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tconst addedTracks = await response.json();\r\n\t\t\t\treturn addedTracks;\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\talert(`There has been a problem with your post data operation: ${error.message}`);\r\n\t\t}\r\n\t};\r\n    \r\n\tconst handleCreatePlaylist = async (e) => {\r\n\t\te.preventDefault();\r\n\t\tconst userId = await fetchProfile(token);\r\n\t\tconst playlistId = await createPlaylist(userId);\r\n\t\tconst snapshotId = await addItemsToPlaylist(playlistId);\r\n\t\talert(`Yout playlist has been added\\nSnapshot: ${snapshotId.snapshot_id}`);\r\n\t};\r\n    \r\n\treturn (\r\n\t\t<>\r\n\t\t\t<form className='playlist-form' action=\"\" onSubmit={handleCreatePlaylist}>\r\n\t\t\t\t<label htmlFor=\"input-name\">Playlist Name</label>\r\n\t\t\t\t<input id='input-name' className='input text' onChange={handleFormPlaylist} type=\"text\" name=\"name\" required/>\r\n\t\t\t\t<label htmlFor=\"input-desc\">Playlist Description</label>\r\n\t\t\t\t<textarea id='input-desc' className='input textarea' onChange={handleFormPlaylist} type=\"textarea\" name=\"description\" minLength={10} required/>\r\n\t\t\t\t<input className='input submit' type=\"submit\" value=\"Save Playlist\" />\r\n\t\t\t</form>\r\n\t\t</>\r\n\t);\r\n}\r\n\r\nexport default PlaylistForm;"]},"metadata":{},"sourceType":"module"}